version: '3'
services:
  mongo:
    container_name: medusa-mongo
    image: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=rootPass
    command: [--auth]
    ports:
      - "27017:27017"
    volumes:
      - "mongodata:/data/db"
    networks:
      - network
  cache:
    container_name: medusa-cache
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    volumes:
      - "cache:/data"
    networks:
      - network
  filebeat:
    container_name: medusa-filebeat
    labels:
      co.elastic.logs/enabled: false
    user: root
    image: docker.elastic.co/beats/filebeat:7.14.0
    command: filebeat -e -strict.perms=false
    volumes:
      - ./filebeat.docker.yml:/usr/share/filebeat/filebeat.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
  elasticsearch:
    container_name: medusa-elastic
    labels:
      co.elastic.logs/enabled: false
    environment:
      - discovery.type=single-node
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    healthcheck:
        test: [ "CMD", "curl", "-s", "-f", "http://medusa-elastic:9200/_cat/health" ]
        interval: 3s
        timeout: 3s
        retries: 80
    ports:
      - "9200:9200"
  kibana:
    container_name: medusa-kibana
    labels:
      co.elastic.logs/enabled: false
    image: docker.elastic.co/kibana/kibana:7.14.0
    depends_on:
      - elasticsearch
    healthcheck:
      test: [ "CMD", "curl", "-s", "-f", "http://medusa-kibana:5601/api/status" ]
      interval: 3s
      timeout: 3s
      retries: 80
    ports:
      - "5601:5601"
  api:
    container_name: medusa-api
    build:
      context: .
      dockerfile: docker/golang/Dockerfile
    environment:
      - MONGODB_URI=mongodb://root:rootPass@medusa-mongo:27017
      - REDIS_URI=redis://:eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81@medusa-cache:6379
    ports:
      - "8000:8000"
    networks:
      - network
    depends_on:
      - mongo
      - cache
    labels:
      co.elastic.logs/enabled: true
      co.elastic.logs/json.keys_under_root: true
      co.elastic.logs/json.overwrite_keys: true
      co.elastic.logs/json.add_error_key: true
      co.elastic.logs/json.expand_keys: true

volumes:
  mongodata:
  cache:

networks:
  network: